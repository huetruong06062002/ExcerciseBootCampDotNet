@inject StoreService storeService
@inject NavigationManager Navigation


@* <!-- Modal trigger button -->
<button type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#updateStore">
  Update Store
</button> *@

<!-- Modal Body -->
@{
  var store = storeService.storeDetail;
}
<div class="modal fade" id="updateStore" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" role="dialog"
  aria-labelledby="modalTitleId" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalTitleId">
          Modal title
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="container">
          <EditForm Model="@store" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
              <label for="name" class="form-label">Name</label>
              <InputText id="name" class="form-control" @bind-Value="store.Name" />
              <ValidationMessage For="@(() => store.Name)" />
            </div>

            <div class="mb-3">
              <label for="alias" class="form-label">Alias</label>
              <InputText id="alias" class="form-control" @bind-Value="store.Alias" />
              <ValidationMessage For="@(() => store.Alias)" />
            </div>

            <div class="mb-3">
              <label for="latitude" class="form-label">Latitude</label>
              <InputText id="latitude" class="form-control" @bind-Value="store.Description" />
              <ValidationMessage For="@(() => store.Description)" />
            </div>

            <div class="mb-3">
              <label for="Longtitude" class="form-label">Longtitude</label>
              <InputText id="Longtitude" class="form-control" @bind-Value="store.Longtitude" />
              <ValidationMessage For="@(() => store.Longtitude)" />
            </div>

            <div class="mb-3">
              <label for="description" class="form-label">Description</label>
              <InputText id="description" class="form-control" @bind-Value="store.Description" />
              <ValidationMessage For="@(() => store.Description)" />
            </div>

            <div class="mb-3">
              <label for="imgLink" class="form-label">Image Link</label>
              <InputText id="imgLink" class="form-control" @bind-Value="store.Image" />
              <ValidationMessage For="@(() => store.Image)" />
            </div>
            <div class="modal-footer">
              <button type="submit" class="btn btn-primary">Save</button>
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseModal"> Close
              </button>
            </div>



          </EditForm>
          @if (!string.IsNullOrEmpty(res))
          {
            <div class="alert alert-success">
              Store added successfully!
            </div>
          }
        </div>
      </div>

    </div>
  </div>
</div>

@code {

  private string res { get; set; } = "";

  protected override async Task OnInitializedAsync()
  {
    storeService.OnChange += StateHasChanged;
  }

  private async Task HandleValidSubmit()
  {
    res = await storeService.UpdateStoreApi();
    StateHasChanged();
  }

  public void Dispose()
  {
    storeService.OnChange -= StateHasChanged;
  }

  private void Cancel()
  {
    // Handle cancel action
    Navigation.NavigateTo("/");
  }

  // This flag controls the modal visibility
  private bool isModalVisible { get; set; } = true;

  private void CloseModal()
  {
    // Set the modal visibility to false to close it
    isModalVisible = false;
    StateHasChanged();
  }
}
