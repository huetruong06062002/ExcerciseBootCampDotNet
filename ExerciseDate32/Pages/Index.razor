@page "/"

@* The store list component *@
@inject StoreService storeService

<style>
  .table-responsive {
    max-width: 100%;
    overflow-x: auto;
  }

  table {
    width: 100%;
    table-layout: fixed;
    /* Adjusts column widths evenly */
  }
</style>

<div class="container mt-5">
  <ModalAdd />
  <ModalUpdate/>
  <!-- Optional: Place to the bottom of scripts -->
  <script>
    const myModal = new bootstrap.Modal(
      document.getElementById("modalId"),
      options,
    );
  </script>

  <h2 class="mb-4">Store List</h2>
  @if(String.IsNullOrEmpty(res) == false)
  {
    <div class="mt-2 alert alert-success">
      @res
    </div>

  }
  <div class="table-responsive">
    <table class="table table-bordered">
      <thead>
        <tr>
          <th scope="col">Id</th>
          <th scope="col">Name</th>
          <th scope="col">Alias</th>
          <th scope="col">Description</th>
          <th scope="col">Image</th>
          <th scope="col">Actions</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var store in storeService.lstStores)
        {
          if (store.Deleted != true)
          {
            <tr>
              <td>@store.Id</td>
              <td>@store.Name</td>
              <td>@store.Alias</td>
              <td>@store.Description</td>
              <td><img src="@store.Image" alt="store image" style="width: 100px; height: auto;" /></td>
              <td>
                <button type="button"  class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#updateStore" @onclick="e => HandleUpdate(store.Id.ToString()) ">Edit</button>
                <button class="btn btn-danger btn-sm" @onclick="e=>deleteStore(store.Id.ToString())">Delete</button>
              </td>
            </tr>
          }
        }
      </tbody>
    </table>
  </div>
</div>



@code {

  public string res = "";

  public async Task HandleUpdate(string id){
     storeService.GetStoreByIdApi(id);
    StateHasChanged();
  }

  public async void deleteStore(string id)
  {
    res = await storeService.DeleteStoreByIdApi(id);
    StateHasChanged();
  }
  protected override async Task OnInitializedAsync()
  {
    //Cài đặt sự kiện load lại giao diện
    storeService.OnChange += StateHasChanged;
    //Gọi api để thay đổi state lstProduct trong service
    storeService.GetAllStoreApi();
  }

  public void Dispose()
  {
    storeService.OnChange -= StateHasChanged;
  }
}