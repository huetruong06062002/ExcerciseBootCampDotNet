<!-- Modal trigger button -->

<!-- Modal Body -->
<!-- if you want to close by clicking outside the modal, delete the last endpoint:data-bs-backdrop and data-bs-keyboard -->
<div class="modal fade" id="modalId" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" role="dialog"
  aria-labelledby="modalTitleId" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalTitleId">
          @TypeTransction
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <h1>Amout</h1>
        <input type="text" class="form-control" @bind="EnterMoney" />
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
        <button type="button" class="btn btn-primary" @onclick="handleSave">Save</button>
      </div>
    </div>
  </div>
</div>

@code {

  public Transaction transaction { get; set; } = new Transaction();


  public enum transactionsName
  {
    Deposit,
    Withdraw
  }

  [Parameter]
  public double Balance { get; set; }


  [Parameter]
  public transactionsName transactionsNameChild { get; set; }

  [Parameter]
  public string TypeTransction { get; set; }

  [Parameter]
  public double EnterMoney { get; set; }

  [Parameter]
  public EventCallback<Transaction> OnHandleTransaction { get; set; }

  void handleSave()
  {
    var transaction = new Transaction
      {
        Amount = EnterMoney,
        Type = TypeTransction,
        Date = DateTime.Now
      };
    OnHandleTransaction.InvokeAsync(transaction);
  }

}
